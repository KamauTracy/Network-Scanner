import os
import json
import csv
import socket

# Folder path containing JSON files
folder_path = "CVE LIST V5"

# Convert a single JSON file to a CSV file
def json_to_csv(json_file, csv_file):
    try:
        # Open and load the JSON file
        with open(json_file, 'r') as jf:
            data = json.load(jf)
        
        # Determine the structure of the JSON data
        if isinstance(data, dict):  # Single dictionary
            data = [data]  # Convert to list of one dictionary
        
        if isinstance(data, list) and len(data) > 0:
            # Extract headers from the first dictionary
            headers = data[0].keys()
            
            # Write CSV file
            with open(csv_file, 'w', newline='', encoding='utf-8') as cf:
                writer = csv.DictWriter(cf, fieldnames=headers)
                writer.writeheader()  # Write the header row
                writer.writerows(data)  # Write the data rows
            print(f"Converted {json_file} to {csv_file}")
        else:
            print(f"Skipping {json_file} - Not a valid JSON array or dictionary")
    except Exception as e:
        print(f"Error processing {json_file}: {e}")

# Batch conversion of JSON files to CSV files (loop through json files)
def convert_all_json_to_csv(folder_path):
    for file in os.listdir(folder_path):
        if file.endswith(".json"):
            json_file = os.path.join(folder_path, file)
            csv_file = os.path.join(folder_path, f"formatted_{file.replace('.json', '.csv')}")
            json_to_csv(json_file, csv_file)

# Port scanning functionality
def scan_port(ip_address, port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(1)
    try:
        result = sock.connect_ex((ip_address, port))
        if result == 0:
            print(f"Port {port} is open")
            return True
        else:
            print(f"Port {port} is closed")
    except Exception as e:
        print(f"An error occurred while scanning port {port}: {e}")
    finally:
        sock.close()
    return False

# Banner grabbing function
def banner_grab(ip_address, port, timeout):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(timeout)
        sock.connect((ip_address, port))
        sock.send(b"Hello\r\n")
        banner = sock.recv(1024)
        return banner.decode().strip()
    except Exception as e:
        print(f"No banner for port {port}: {e}")
        return None

# Load vulnerabilities from CSV
def load_vulnerabilities(csv_file):
    vulnerabilities = []
    try:
        with open(csv_file, "r") as file:
            reader = csv.DictReader(file)
            for row in reader:
                vulnerabilities.append(row)
    except FileNotFoundError:
        print(f"CSV file {csv_file} not found.")
    return vulnerabilities

# Check for vulnerabilities based on banner (Matching vulnerabilities)
def check_vulnerabilities(banner, vulnerabilities):
    for entry in vulnerabilities:
        if entry.get("Product", "").lower() in banner.lower():
            print(f"Vulnerability found: {entry['CVE_ID']} - {entry['Description']}")
            return entry["CVE_ID"]
    return None

# Main function
def run_scanner(ip_address, start_port, end_port, timeout):
    #convert_all_json_to_csv(folder_path)  # Convert all JSON files to CSV before scanning    

    # Load the first CSV file for demonstration purposes
    first_csv = os.path.join(folder_path, "formatted_CVE-2024-0002.csv")  # Replace with actual CSV if needed
    vulnerabilities = load_vulnerabilities(first_csv)
    
    # Scan each port and check vulnerabilities
    for port in range(start_port, end_port + 1):
        if scan_port(ip_address, port):
            banner = banner_grab(ip_address, port, timeout)
            if banner:
                print(f"Banner for port {port}: {banner}")
                vuln = check_vulnerabilities(banner, vulnerabilities)
                if vuln:
                    print(f"Potential vulnerability on port {port}: {vuln}")
                else:
                    print(f"No known vulnerabilities found for port {port}")
            else:
                print(f"No banner found for port {port}")

# Run the scanner
run_scanner("192.168.2.1", 1, 500, 1)
